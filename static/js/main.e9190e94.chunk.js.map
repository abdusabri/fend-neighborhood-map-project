{"version":3,"sources":["components/header.js","data/locations-api.js","components/loader.js","components/content-error.js","components/location-info.js","components/map.js","components/locations-list.js","app.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","style","zIndex","foursquare","require","clientID","process","clientSecret","getLocationInfo","location","Promise","resolve","reject","venues","getVenues","ll","concat","longitude","latitude","intent","query","name","getParams","then","res","meta","code","response","Array","isArray","venue","find","getVenue","venue_id","id","url","shortUrl","length","photo","photos","groups","items","prefix","suffix","getPhoto","catch","err","getLocationDetails","Loader","props","isMain","ContentError","md","role","errorMesage","defaultProps","LocationInfo","state","isLoading","hasError","locationInfo","this","prevProps","setState","LocationsAPI","_this2","loader","content_error","alt","src","href","target","Component","Map","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","viewport","zoom","bearing","pitch","width","height","isMapLoaded","resize","map","document","getElementById","objectSpread","offsetWidth","offsetHeight","handleMapboxError","e","error","status","message","startsWith","mapRef","current","getMap","off","handleOnError","arguments","undefined","onMapLoaded","handleMapLoaded","React","createRef","ResizeObserver","observe","firstElementChild","tabIndex","on","setTimeout","_this3","aria-label","esm","assign","ref","mapboxApiAccessToken","mapStyle","onViewportChange","onLoad","onError","touchRotate","getCursor","_ref","isDragging","locations","key","selectedLocation","onClick","onLocationSelected","tipSize","anchor","onClose","closeOnClick","location_info","LocationsList","filterText","handleTextChange","value","filterLocationsDebounced","debounce","filterLocations","handleLocationClick","handleLocationKeyUp","keyCode","onLocationsFiltered","LOCATIONS","match","RegExp","escapeRegExp","filteredLocations","filter","test","findIndex","cancel","type","placeholder","onChange","onKeyUp","sidebarMediaQuery","window","matchMedia","sidebarStyle","sidebar","top","content","overlay","App","sidebarDocked","matches","sidebarOpen","isMapLoading","initialRender","setSelectedLocationBasedOnPath","strLocId","pathname","substr","locationId","parseInt","targetLocation","handleLocationSelected","mediaQueryChanged","onSetSidebarOpen","open","toggleOpen","preventDefault","pushToHistory","JSON","stringify","routeRef","context","router","history","push","addListener","listen","action","header","BrowserRouter","basename","Switch","Route","exact","path","render","react_sidebar_esm","docked","onSetOpen","styles","locations_list","components_map","Redirect","from","to","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","src_app","URL","origin","addEventListener","fetch","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e9190e94.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <div className='navbar navbar-dark bg-dark'  \r\n                style={{zIndex: 3}}>\r\n                <h1 className='navbar-brand mb-0 h1'>\r\n                    Neighborhood Map\r\n                </h1>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","const foursquare = require('react-foursquare')({\r\n    clientID: process.env.REACT_APP_FSQ_ClIENT_ID,\r\n    clientSecret: process.env.REACT_APP_FSQ_CLIENT_SECRET\r\n});\r\n\r\nexport const getLocationInfo = function (location) {\r\n    return new Promise(function (resolve, reject) {\r\n        foursquare.venues.getVenues(getParams(location))\r\n            .then(res => {\r\n                if (res && res.meta && res.meta.code === 200) {\r\n                    if (res.response && res.response.venues\r\n                        && Array.isArray(res.response.venues)) {\r\n                        getLocationDetails(location, res.response.venues,\r\n                            resolve, reject);\r\n                    } else {\r\n                        reject();\r\n                    }\r\n                } else {\r\n                    reject();\r\n                }\r\n            })\r\n            .catch((err) => reject(err));\r\n    })\r\n}\r\n\r\nfunction getParams(location) {\r\n    return {\r\n        'll': `${location.longitude},${location.latitude}`,\r\n        'intent': 'global',\r\n        'query': location.name\r\n    };\r\n}\r\n\r\nfunction getLocationDetails(location, venues, resolve, reject) {\r\n    const venue = venues.find((venue) => venue.name === location.name);\r\n    foursquare.venues.getVenue({ \"venue_id\": venue.id })\r\n        .then((res) => {\r\n            if (res && res.meta && res.meta.code === 200) {\r\n                if (res.response && res.response.venue) {\r\n                    resolve(parseVenue(res.response.venue));\r\n                } else {\r\n                    reject();\r\n                }\r\n            } else {\r\n                reject();\r\n            }\r\n        })\r\n        .catch((err) => reject(err));\r\n}\r\n\r\nfunction parseVenue(venue) {\r\n    return {\r\n        url: (venue.shortUrl && venue.shortUrl.length > 0) ?\r\n            venue.shortUrl : 'https://foursquare.com/',\r\n        photo: getPhoto(venue)\r\n    }\r\n}\r\n\r\nfunction getPhoto(venue) {\r\n    let photo = 'https://adcdl6asn.cloudimg.io/width/200/x/';\r\n\r\n    if (venue.photos && venue.photos.groups && Array.isArray(venue.photos.groups)\r\n        && venue.photos.groups.length > 0) {\r\n        const groups = venue.photos.groups;\r\n        const items = (groups.length > 1) ? groups[1].items : groups[0].items;\r\n        if (Array.isArray(items) && items.length > 0) {\r\n            photo = `${items[0].prefix}width220${items[0].suffix}`;\r\n        }\r\n    }\r\n\r\n    return photo;\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Loader = (props) => {\r\n    return (\r\n        <div className={(props.isMain)?\r\n            'loader-container' : 'content-loader-container'}>\r\n            <div className='loader'></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nLoader.propTypes = {\r\n    isMain: PropTypes.bool.isRequired\r\n}\r\n\r\nexport default Loader;","import React from 'react';\r\nimport { MdError } from 'react-icons/md';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContentError = (props) => {\r\n    return (\r\n        <div className='content-loader-container container-error'>\r\n            <MdError className='error-icon text-warning'/>\r\n            <div className='alert alert-warning alert-no-border text-center' role='alert'>\r\n                Oops! <br/>\r\n                {(props.errorMesage)? \r\n                    props.errorMesage : 'Something is not right :('}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nContentError.propTypes = {\r\n    errorMesage: PropTypes.string\r\n}\r\n\r\nContentError.defaultProps = {\r\n    errorMesage: null\r\n}\r\n\r\nexport default ContentError;","import React, { Component } from 'react';\r\nimport * as LocationsAPI from '../data/locations-api';\r\nimport PropTypes from 'prop-types';\r\nimport Loader from './loader';\r\nimport ContentError from './content-error';\r\n\r\nclass LocationInfo extends Component {\r\n    static propTypes = {\r\n        location: PropTypes.shape({\r\n            id: PropTypes.number.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            latitude: PropTypes.number.isRequired,\r\n            longitude: PropTypes.number.isRequired\r\n        }).isRequired\r\n    }\r\n\r\n    state = {\r\n        isLoading: true,\r\n        hasError: false,\r\n        locationInfo: {}\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getLocationInfo(this.props.location);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.location.id !== this.props.location.id) {\r\n            this.setState({\r\n                locationInfo: {},\r\n                isLoading: true,\r\n                hasError: false\r\n            });\r\n            this.getLocationInfo(this.props.location);\r\n        }\r\n    }\r\n\r\n    async getLocationInfo(location) {\r\n        LocationsAPI.getLocationInfo(location)\r\n            .then(res => this.setState({\r\n                locationInfo: res,\r\n                isLoading: false\r\n            }))\r\n            .catch(() => this.setState({\r\n                locationInfo: {},\r\n                isLoading: false,\r\n                hasError: true\r\n            }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section className='location-info'>\r\n                <h3 className='h5 text-primary'>{this.props.location.name}</h3>\r\n                <hr/>\r\n                {this.state.isLoading && <Loader isMain={false}/>}\r\n\r\n                {!this.state.isLoading && this.state.hasError &&\r\n                    <ContentError />}\r\n\r\n                {!this.state.isLoading && !this.state.hasError &&\r\n                    (<div>\r\n                        <img alt={this.state.locationInfo.name} \r\n                            src={this.state.locationInfo.photo}/>\r\n\r\n                        <div><a href={this.state.locationInfo.url} \r\n                            target='_new'> View on Foursquare </a></div>\r\n                    </div>\r\n                )}\r\n            </section>\r\n        )\r\n      }\r\n}\r\n\r\nexport default LocationInfo;","import React, { Component } from 'react';\r\nimport ReactMapGL, { NavigationControl, Marker, Popup } from 'react-map-gl';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\nimport { MdLocationOn } from 'react-icons/md';\r\nimport PropTypes from 'prop-types';\r\nimport LocationInfo from './location-info';\r\nimport ContentError from './content-error';\r\n\r\nconst API_KEY = process.env.REACT_APP_MAPBOX_API_KEY;\r\n\r\nclass Map extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.mapRef = React.createRef();\r\n    }\r\n\r\n    static propTypes = {\r\n        locations: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                id: PropTypes.number.isRequired,\r\n                name: PropTypes.string.isRequired,\r\n                latitude: PropTypes.number.isRequired,\r\n                longitude: PropTypes.number.isRequired\r\n            })\r\n        ).isRequired,\r\n        selectedLocation: PropTypes.shape({\r\n            id: PropTypes.number.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            latitude: PropTypes.number.isRequired,\r\n            longitude: PropTypes.number.isRequired\r\n        }),\r\n        onLocationSelected: PropTypes.func.isRequired,\r\n        onMapLoaded: PropTypes.func.isRequired\r\n    }\r\n\r\n    state = {\r\n        viewport: {\r\n            latitude: 52.492,\r\n            longitude: 13.344,\r\n            zoom: 11.50,\r\n            bearing: 0,\r\n            pitch: 0,\r\n            width: 600,\r\n            height: 600\r\n        },\r\n        hasError: false,\r\n        isMapLoaded: false,\r\n        errorMesage: null // Used for the case of incorrect Mapbox API token\r\n    }\r\n\r\n    componentDidMount() {\r\n        // A workaround for an issue that ReactMapGL gets only\r\n        // fixed width and height (no CSS-style 100%)\r\n        new ResizeObserver(this.resize).observe(document.getElementById('map'));\r\n\r\n        // Workaround to fix the issue that container div generated by \r\n        // ReactMapGL comp is set to \"1\"\r\n        document.getElementById('map').firstElementChild.tabIndex = -1;\r\n\r\n        // This is a workaround to specially handle the case of incorrect\r\n        // Mapbox API token. And that's because neither onLoad nor onError\r\n        // events are fired by ReactMapGL in that case\r\n        this.mapRef.current.getMap().on('error', this.handleMapboxError);\r\n\r\n        // If ReactMapGL didn't fire the onLoad event or onError within\r\n        // 15 seconds, consider this as a timeout, and treat as error\r\n        setTimeout(() => {\r\n            if (!this.state.isMapLoaded) {\r\n                this.setState({\r\n                    isMapLoaded: true,\r\n                    hasError: true\r\n                });\r\n                this.props.onMapLoaded();\r\n            }\r\n        }, 15000);\r\n    }\r\n\r\n    // A workaround for an issue with the ReactMapGL getting only\r\n    // fixed width and height (no CSS-style 100%)\r\n    resize = () => {\r\n        const map = document.getElementById('map');\r\n\r\n        this.setState({\r\n            viewport: {\r\n                ...this.state.viewport,\r\n                width: map.offsetWidth,\r\n                height: map.offsetHeight\r\n            }\r\n        });\r\n    }\r\n\r\n    // This is a workaround to specially handle the case of incorrect\r\n    // Mapbox API token. And that's because neither onLoad nor onError\r\n    // events are fired by ReactMapGL in that case\r\n    handleMapboxError = (e) => {\r\n        if (e.error.status === 401 && e.error.message.startsWith('Unauthorized:')) {\r\n            this.mapRef.current.getMap().off('error', this.handleMapboxError);\r\n            this.handleOnError(e.error.message);\r\n        }\r\n    }\r\n\r\n    handleOnError = (message = null) => {\r\n        this.setState({\r\n            hasError: true,\r\n            isMapLoaded: true,\r\n            errorMesage: message\r\n        });\r\n        this.props.onMapLoaded();\r\n    }\r\n\r\n    handleMapLoaded = () => {\r\n        this.setState({\r\n            isMapLoaded: true\r\n        });\r\n        this.props.onMapLoaded();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id='map' role='application' aria-label='Map with locations'\r\n                style={{ height: '100%', width: '100%' }}>\r\n\r\n                {this.state.hasError && <ContentError errorMesage={this.state.errorMesage} />}\r\n\r\n                {!this.state.hasError &&\r\n                    (<ReactMapGL ref={this.mapRef} mapboxApiAccessToken={API_KEY}\r\n                        mapStyle='mapbox://styles/mapbox/streets-v10??optimize=true'\r\n                        {...this.state.viewport}\r\n                        onViewportChange={(viewport) => this.setState({ viewport })}\r\n                        onLoad={this.handleMapLoaded}\r\n                        onError={this.handleOnError}\r\n                        touchRotate={true}\r\n                        getCursor={({ isDragging }) => isDragging ? 'move' : 'default'}>\r\n\r\n                        {this.props.locations.map((location) => (\r\n                            <Marker key={location.id}\r\n                                longitude={location.longitude}\r\n                                latitude={location.latitude}>\r\n                                <span><MdLocationOn\r\n                                    className={(this.props.selectedLocation &&\r\n                                        this.props.selectedLocation.id === location.id) ?\r\n                                        'map-marker map-marker--selected' : 'map-marker'}\r\n                                    onClick={() => this.props.onLocationSelected(location)} />\r\n                                </span>\r\n                            </Marker>\r\n                        ))}\r\n\r\n                        {this.props.selectedLocation && (\r\n                            <Popup tipSize={10}\r\n                                anchor='top'\r\n                                longitude={this.props.selectedLocation.longitude}\r\n                                latitude={this.props.selectedLocation.latitude}\r\n                                onClose={() => this.props.onLocationSelected(null)}\r\n                                closeOnClick={false}>\r\n                                <LocationInfo location={this.props.selectedLocation} />\r\n                            </Popup>\r\n                        )}\r\n\r\n                        <div className='nav map-nav-control'>\r\n                            <NavigationControl\r\n                                onViewportChange={(viewport) => this.setState({ viewport })} />\r\n                        </div>\r\n                    </ReactMapGL>\r\n                    )}\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default Map;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport debounce from 'lodash.debounce';\r\nimport escapeRegExp from 'escape-string-regexp';\r\n\r\nimport LOCATIONS from '../data/locations.json';\r\n\r\nclass LocationsList extends Component {\r\n    static propTypes = {\r\n        locations: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                id: PropTypes.number.isRequired,\r\n                name: PropTypes.string.isRequired,\r\n                latitude: PropTypes.number.isRequired,\r\n                longitude: PropTypes.number.isRequired\r\n            })\r\n        ),\r\n        onLocationsFiltered: PropTypes.func.isRequired,\r\n        onLocationSelected: PropTypes.func.isRequired,\r\n        selectedLocation: PropTypes.shape({\r\n            id: PropTypes.number.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            latitude: PropTypes.number.isRequired,\r\n            longitude: PropTypes.number.isRequired\r\n        })\r\n    }\r\n\r\n    state = {\r\n        filterText: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onLocationsFiltered(LOCATIONS);\r\n    }\r\n\r\n    handleTextChange = (e) => {\r\n        this.setState({ filterText: e.target.value });\r\n        this.filterLocationsDebounced(e.target.value);\r\n    }\r\n\r\n    filterLocationsDebounced = debounce(this.filterLocations, 200);\r\n    \r\n    filterLocations(filterText) {\r\n        if (filterText.length === 0) {\r\n            this.props.onLocationsFiltered(LOCATIONS); // Reset locations if text is cleared\r\n        } else {\r\n            const match = new RegExp(escapeRegExp(filterText), 'i');\r\n            const filteredLocations =\r\n                LOCATIONS.filter((location) => match.test(location.name));\r\n            // Clear selected location if it has been filtered-out \r\n            if (this.props.selectedLocation && \r\n                filteredLocations.findIndex((location) => \r\n                location.id === this.props.selectedLocation.id) === -1) {\r\n                    this.props.onLocationSelected(null);\r\n            }\r\n            this.props.onLocationsFiltered(filteredLocations);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.filterLocationsDebounced.cancel();\r\n    }\r\n\r\n    handleLocationClick = (e) => {\r\n        this.props.onLocationSelected(this.props.locations.find(\r\n            (location) => location.id === e.target.value));\r\n    }\r\n\r\n    handleLocationKeyUp = (e) => {\r\n        // Enter or Space keys\r\n        if (e.keyCode === 32 || e.keyCode === 13) {\r\n            this.props.onLocationSelected(this.props.locations.find(\r\n                (location) => location.id === e.target.value));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <article className='locations-list'>\r\n                <input className='form-control form-control-lg' \r\n                    type='text' placeholder='Filter locations'\r\n                    aria-label='Filter locations'\r\n                    onChange={this.handleTextChange}\r\n                    value={this.state.filterText}/>\r\n                <ul className='list-group list-group-flush'>\r\n                    {this.props.locations.map((location) => (\r\n                        <li key={location.id}\r\n                            value={location.id}\r\n                            className={(this.props.selectedLocation &&\r\n                                this.props.selectedLocation.id === location.id) ?\r\n                                'list-group-item list-group-item-action active' :\r\n                                'list-group-item list-group-item-action'}\r\n                            tabIndex='0'\r\n                            onClick={this.handleLocationClick}\r\n                            onKeyUp={this.handleLocationKeyUp}>\r\n                            {location.name}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </article>\r\n        )\r\n    };\r\n}\r\n\r\nexport default LocationsList;","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './styles/app.css';\r\nimport React, { Component } from 'react';\r\nimport Header from './components/header';\r\nimport Sidebar from 'react-sidebar';\r\nimport { MdMenu } from 'react-icons/md';\r\nimport Map from './components/map';\r\nimport LocationsList from './components/locations-list';\r\nimport Loader from './components/loader';\r\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\r\n\r\nconst sidebarMediaQuery = window.matchMedia(`(min-width: 650px)`);\r\nconst sidebarStyle = {\r\n  sidebar: {\r\n    top: 56,\r\n    zIndex: 3\r\n  },\r\n  content: {\r\n    top: 56\r\n  },\r\n  overlay: {\r\n    top: 56\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.routeRef = React.createRef();\r\n  }\r\n\r\n  state = {\r\n    sidebarDocked: sidebarMediaQuery.matches,\r\n    sidebarOpen: false,\r\n    locations: [],\r\n    selectedLocation: null,\r\n    isMapLoading: true,\r\n    initialRender: true\r\n  }\r\n\r\n  componentDidMount() {\r\n    sidebarMediaQuery.addListener(this.mediaQueryChanged);\r\n\r\n    // Listen to url changes to select the appropriate location\r\n    // so that its popup is displayed correctly\r\n    if (this.routeRef.current) {\r\n      this.routeRef.current.context.router.history\r\n        .listen((location, action) => {\r\n          // If the action is not POP, it means it is a result of\r\n          // user interaction with the map or the locations list\r\n          // and no need to force-display or push to history\r\n          if (action === 'POP') {\r\n            this.setSelectedLocationBasedOnPath(location);\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // Specially to handle the case where the user changes/enters/refreshes\r\n    // the url in the browser, and ensure the right view is rendered\r\n    if (this.state.initialRender === true) {\r\n      this.setState({ initialRender: false });\r\n      this.setSelectedLocationBasedOnPath(\r\n        this.routeRef.current.context.router.history.location);\r\n    }\r\n  }\r\n\r\n  setSelectedLocationBasedOnPath = (location) => {\r\n    const strLocId = location.pathname.substr(1);\r\n    if (strLocId && strLocId.length > 0) { // url contains the id of a location\r\n      const locationId = parseInt(strLocId);\r\n      const targetLocation = this.state.locations.find(\r\n        (location) => location.id === locationId);\r\n      if (targetLocation) {\r\n        this.handleLocationSelected(targetLocation, false);\r\n      } else {\r\n        this.handleLocationSelected(null, true);\r\n      }\r\n    } else {\r\n      this.handleLocationSelected(null, false);\r\n    }\r\n  }\r\n\r\n  mediaQueryChanged = () => {\r\n    this.setState({\r\n      sidebarDocked: sidebarMediaQuery.matches,\r\n      sidebarOpen: false\r\n    });\r\n  }\r\n\r\n  onSetSidebarOpen = (open) => {\r\n    this.setState({ sidebarOpen: open });\r\n  }\r\n\r\n  toggleOpen = (e) => {\r\n    this.setState({ sidebarOpen: !this.state.sidebarOpen });\r\n\r\n    if (e) {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  handleLocationSelected = (location, pushToHistory = true) => {\r\n    if (JSON.stringify(location) !==\r\n      JSON.stringify(this.state.selectedLocation)) {\r\n      if (this.state.selectedLocation !== null) {\r\n        this.setState({ selectedLocation: null });\r\n      }\r\n      this.setState({ selectedLocation: location });\r\n\r\n      if (pushToHistory) {\r\n        this.routeRef.current.context.router.history\r\n          .push((location) ? '/' + location.id : '/');\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n\r\n        {this.state.isMapLoading && <Loader isMain={true} />}\r\n\r\n        {!this.state.sidebarDocked && !this.state.isMapLoading && (\r\n          <button type='button'\r\n            className='btn btn-link menu-link' onClick={this.toggleOpen}>\r\n            <MdMenu />\r\n          </button>\r\n        )}\r\n\r\n        <main>\r\n          <BrowserRouter basename=\"/fend-neighborhood-map-project\">\r\n            <Switch>\r\n              {/* Route uses a RegEx to match against the possible ids as contained\r\n                  in the \"locations.json\" file. Not the best or an automated way, but \r\n                  works well for this case since the locations are mostly hard-coded */}\r\n              <Route ref={this.routeRef} exact path='(/[1-9]?)' render={() =>\r\n                <Sidebar\r\n                  open={this.state.sidebarOpen}\r\n                  docked={this.state.sidebarDocked}\r\n                  onSetOpen={this.onSetSidebarOpen}\r\n                  styles={sidebarStyle}\r\n                  sidebar={<LocationsList\r\n                    locations={this.state.locations}\r\n                    onLocationsFiltered={(filteredLocations) =>\r\n                      this.setState({ locations: filteredLocations })}\r\n                    onLocationSelected={this.handleLocationSelected}\r\n                    selectedLocation={this.state.selectedLocation} />}>\r\n\r\n                  <Map locations={this.state.locations}\r\n                    selectedLocation={this.state.selectedLocation}\r\n                    onLocationSelected={this.handleLocationSelected}\r\n                    onMapLoaded={() => this.setState({ isMapLoading: false })} />\r\n                </Sidebar>\r\n              } />\r\n              <Redirect from='*' to='/' />\r\n            </Switch>\r\n          </BrowserRouter>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}