import React, { Component } from 'react';
import ReactMapGL, { NavigationControl, Marker, Popup } from 'react-map-gl';
import 'mapbox-gl/dist/mapbox-gl.css';
import ResizeObserver from 'resize-observer-polyfill';
import { MdLocationOn } from 'react-icons/md';
import PropTypes from 'prop-types';
import LocationInfo from './location-info';
import ContentError from './content-error';

const API_KEY = 'pk.eyJ1IjoiYWJkdXNhYnJpIiwiYSI6ImNqbmg0dG9vMzA5YnMzcHRsc3NyYW9pZ3MifQ.GznJS1gglPuQoa-3RGeGeA';

class Map extends Component {
    static propTypes = {
        locations: PropTypes.arrayOf(
            PropTypes.shape({
                id: PropTypes.number.isRequired,
                name: PropTypes.string.isRequired,
                latitude: PropTypes.number.isRequired,
                longitude: PropTypes.number.isRequired
            })
        ).isRequired,
        selectedLocation: PropTypes.shape({
            id: PropTypes.number.isRequired,
            name: PropTypes.string.isRequired,
            latitude: PropTypes.number.isRequired,
            longitude: PropTypes.number.isRequired
        }),
        onLocationSelected: PropTypes.func.isRequired,
        onMapLoaded: PropTypes.func.isRequired
    }
    
    state = {
        viewport: {
            latitude: 52.492,
            longitude: 13.344,
            zoom: 11.50,
            bearing: 0,
            pitch: 0,
            width: 600,
            height: 600
        },
        hasError: false,
        isMapLoaded: false
    }

    componentDidMount() {
        // A workaround for an issue with the ReactMapGL getting only
        // fixed width and height (no CSS-style 100%)
        new ResizeObserver(this.resize).observe(document.getElementById('map'));
        
        // Workaround to fix the issue that container div generated by 
        // ReactMapGL comp is set to "1"
        document.getElementById('map').firstElementChild.tabIndex = -1;
        
        // If ReactMapGL didn't fire the onLoad event or onError within
        // 15 seconds, consider this as a timeout, and treat as error
        setTimeout(() => {
            if (!this.state.isMapLoaded) {
                this.setState({
                    isMapLoaded: true,
                    hasError: true
                });
                this.props.onMapLoaded();
            }
        }, 15000);
    }

    // A workaround for an issue with the ReactMapGL getting only
    // fixed width and height (no CSS-style 100%)
    resize = () => {
        const map = document.getElementById('map');
        
        this.setState({
            viewport: {
                ...this.state.viewport,
                width: map.offsetWidth,
                height: map.offsetHeight
            }
        });
    }

    handleOnError = () => {
        this.setState({
            hasError: true,
            isMapLoaded: true
        });
        this.props.onMapLoaded();
    }

    handleMapLoaded = () => {
        this.setState({
            isMapLoaded: true
        });
        this.props.onMapLoaded();
    }

    render() {
        return (
            <div id='map' role='application' aria-label='Map with locations'
                style={{height: '100%', width: '100%'}}>

                {this.state.hasError && <ContentError />}

                {!this.state.hasError &&
                    (<ReactMapGL mapboxApiAccessToken={API_KEY}
                        mapStyle='mapbox://styles/mapbox/streets-v10??optimize=true'
                        {...this.state.viewport}
                        onViewportChange={(viewport) => this.setState({viewport})}
                        onLoad={this.handleMapLoaded}
                        onError={this.handleOnError}
                        touchRotate={true}
                        getCursor={({isDragging}) => isDragging ? 'move' : 'default'}>
    
                        {this.props.locations.map((location) => (
                            <Marker key={location.id}
                                longitude={location.longitude}
                                latitude={location.latitude}>
                                <span><MdLocationOn 
                                    className={(this.props.selectedLocation &&
                                        this.props.selectedLocation.id === location.id) ?
                                        'map-marker map-marker--selected' : 'map-marker'}
                                    onClick={() => this.props.onLocationSelected(location)}/>
                                </span>
                            </Marker>
                        ))}
    
                        {this.props.selectedLocation && (
                            <Popup tipSize={10}
                                anchor='top'
                                longitude={this.props.selectedLocation.longitude}
                                latitude={this.props.selectedLocation.latitude}
                                onClose={() => this.props.onLocationSelected(null)}
                                closeOnClick={false}>
                                <LocationInfo location={this.props.selectedLocation}/>
                            </Popup>
                        )}
    
                        <div className='nav map-nav-control'>
                            <NavigationControl 
                                onViewportChange={(viewport) => this.setState({viewport})} />
                        </div>
                    </ReactMapGL>
                )}
            </div>
        )
    };
}

export default Map;